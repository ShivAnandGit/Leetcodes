class Solution {
    int islands= 0;
    public int numIslands(char[][] grid) {
        
        int rowNums= grid.length;
        int colNums = grid[0].length;
        
        // int islands= 0;
        
        boolean[][] visited = new boolean[rowNums][colNums];
        for(int i=0; i < rowNums; i++){
            Arrays.fill(visited[i],false);
        }
        
        for(int row = 0; row < rowNums; row++){
            for(int col = 0; col < colNums; col++){
                
                if(grid[row][col] == '1' && !visited[row][col]){
                    islands++;
                    dfs(grid, visited, row, col);
                }
                    }
                    
                }
         return islands;   
        }
        
    
    
    private void dfs(char[][] grid, boolean[][] isVisited, int row, int col){
        if(row > grid.length-1 || row < 0 || col >grid[0].length-1 || col< 0 || isVisited[row][col]==true
          ||grid[row][col] == '0'){
            return;
        }
        isVisited[row][col] = true;
        // grid[row][col] = '0';
        dfs(grid, isVisited, row+1, col);
        dfs(grid, isVisited, row-1, col);
        dfs(grid, isVisited, row, col+1);
        dfs(grid, isVisited, row, col-1); 
    }
}
